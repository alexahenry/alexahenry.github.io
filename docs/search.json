[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "Since this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "1 + 1\n\n[1] 2"
  },
  {
    "objectID": "posts/hello-world/index.html",
    "href": "posts/hello-world/index.html",
    "title": "Hello World",
    "section": "",
    "text": "This is my first sports blog ever…"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Sports Blog",
    "section": "",
    "text": "football\n\n\nNFL\n\n\n\n\n\n\n\n\n\n\n\nNov 2, 2023\n\n\nAlexa Henry\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nfootball\n\n\nbig ten\n\n\n\n\n\n\n\n\n\n\n\nOct 26, 2023\n\n\nAlexa Henry\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nfootball\n\n\nbig ten\n\n\n\n\n\n\n\n\n\n\n\nOct 17, 2023\n\n\nAlexa Henry\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nfootball\n\n\nbig ten\n\n\n\n\n\n\n\n\n\n\n\nOct 10, 2023\n\n\nAlexa Henry\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nOct 5, 2023\n\n\nHarlow Malloc\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 5, 2023\n\n\nAlexa Henry\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nOct 2, 2023\n\n\nTristan O’Malley\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/big-ten-cfb-avg-plays/index.html",
    "href": "posts/big-ten-cfb-avg-plays/index.html",
    "title": "The Impact of the Clock Rule in the Big Ten",
    "section": "",
    "text": "Code\nfootball22 <- read_csv(\"https://dwillis.github.io/sports-data-files/footballlogs22.csv\")\nfootball23 <- read_csv(\"https://dwillis.github.io/sports-data-files/footballlogs23.csv\")\n\n\n\n\nCode\nhead(football22)\n\n\n\n\nCode\nbigten22 <- football22 |> \n  filter(Conference == \"Big Ten Conference\")\nbigten23 <- football23 |> \n  filter(Conference == \"Big Ten Conference\")\n\n\nI started off by creating a data frame to separate the seasons.\nAverages:\nThen I averaged offensive plays for each season.\n\n\nCode\nbigten22 |>\n  group_by(Team) |>\n  summarise (\n    mean_OffensivePlays = mean(OffensivePlays)\n  ) \n\nbigten23 |>\n  group_by(Team) |>\n  summarise (\n    mean_OffensivePlays = mean(OffensivePlays)\n  ) \n\n\nThen, I created a new data frame so it’s just the average offensive plays and the big ten teams.\n\n\nCode\noffavg22 <- bigten22 |>\n  group_by(Team) |>\n  summarise (\n    mean_OffensivePlays = mean(OffensivePlays)\n  ) \n\noffavg23 <- bigten23 |>\n  group_by(Team) |>\n  summarise (\n    mean_OffensivePlays = mean(OffensivePlays)\n  ) \n\n\nBar Charts\nI created a bar chart with the data.\n\n\nCode\nggplot()+\n  geom_bar(\n    data=offavg22, \n    aes(x=Team, weight=`mean_OffensivePlays`)\n  )\n\n\n\n\n\n\n\nCode\nggplot()+\n  geom_bar(\n    data=offavg22, \n    aes(\n      x=reorder(Team, `mean_OffensivePlays`),\n      weight=`mean_OffensivePlays`\n      )\n  )\n\n\n\n\n\nCode\nggplot()+\n  geom_bar(\n    data=offavg23, \n    aes(\n      x=reorder(Team, `mean_OffensivePlays`),\n      weight=`mean_OffensivePlays`\n      )\n  )\n\n\n\n\n\nSo, the X-axis looks a little messy but let me cook. I reordered the chart so the most amount of plays is ordered from least to most amount of plays.\nLoaded the library…\n\n\nCode\nlibrary(scales)\n\n\nBam!!!! Here’s my final charts\n\n\nCode\nggplot()+\n  geom_bar(\n    data=offavg22, \n    aes(x=reorder(Team, `mean_OffensivePlays`),\n        weight=`mean_OffensivePlays`)) +\n  scale_y_continuous(labels=comma) + \n  labs(\n    title=\"Purdue tops Big Ten in Playmaking in 2022\", \n    x=\"School\",\n    y=\"Average Offensive Plays\") +\n  theme_minimal() +\n  coord_flip()\n\n\n\n\n\n\n\nCode\nggplot()+\n  geom_bar(\n    data=offavg23, \n    aes(x=reorder(Team, `mean_OffensivePlays`),\n        weight=`mean_OffensivePlays`)) +\n  scale_y_continuous(labels=comma) + \n  labs(\n    title=\"Nittany Lions Run off with 2023 plays\", \n    x=\"School\",\n    y=\"Average Offensive Plays\") +\n  theme_minimal() +\n  coord_flip()\n\n\n\n\n\nIn conclusion, it appears the Big Ten teams were running around the same amount of plays but this season it appears that there is some difference. Even with the rule change, it appears schools like Penn State are running more plays this season despite the rule change. Offensive play leaders like Purdue are now second in running offensive plays this season.\nIt looks like Big Ten teams are running more offensive plays this season compared to last season even with the rule change. What’s interesting is that Iowa remained last in the Big Ten for running offensive plays. Needless to say, after the Penn State game this season the conversation of replacing the offensive coordinator was revisited. In my opinion, based on these results, I think it would be time to move on from the OC at Iowa.\nWhat’s good to see is that Maryland remains at the top. But what’s interesting to see is that Ohio State is in the middle of the pact in the 2022 season but closer to the bottom in 2023 and Michigan actually started running less offensive plays this year compared to last year. Maybe they think, all defense wins games? Interesting.\nMaybe, this data can be revisited when the season concludes."
  },
  {
    "objectID": "posts/third-and-six/index.html",
    "href": "posts/third-and-six/index.html",
    "title": "Third and Six",
    "section": "",
    "text": "Code\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nlibrary(cfbfastR)\n\n\n\nLoad play by play data\n\n\nCode\nplays &lt;- load_cfb_pbp(seasons = c(2019, 2020, 2021, 2022, 2023))\n\n\n\n\nCode\nthird_and_six &lt;- plays |&gt; filter(down==3, distance==6)\n\n\n\n\nCode\nthird_and_six |&gt; \n  group_by (play_type) |&gt;\n  summarise(\n    plays = n()\n  )\n\n\n# A tibble: 19 × 2\n   play_type                            plays\n   &lt;chr&gt;                                &lt;int&gt;\n 1 Blocked Field Goal                       1\n 2 Field Goal Good                         13\n 3 Field Goal Missed                        3\n 4 Fumble Recovery (Opponent)              83\n 5 Fumble Recovery (Opponent) Touchdown     1\n 6 Fumble Recovery (Own)                   55\n 7 Fumble Return Touchdown                  3\n 8 Interception Return                    182\n 9 Interception Return Touchdown           24\n10 Pass Incompletion                     2859\n11 Pass Reception                        3484\n12 Passing Touchdown                      383\n13 Penalty                                813\n14 Punt                                     3\n15 Rush                                  2359\n16 Rushing Touchdown                      100\n17 Sack                                   613\n18 Safety                                   2\n19 Timeout                                674\n\n\n\n\nCode\nrush_plays &lt;- c(\"Rush\", \"Rushing Touchdown\")\n  \nthird_and_six |&gt;\n  filter(play_type %in% rush_plays) |&gt; \n  summarise(\n    plays = n()\n  )\n\n\n# A tibble: 1 × 1\n  plays\n  &lt;int&gt;\n1  2459\n\n\n\n\nCode\n2459 / 11655 *100\n\n\n[1] 21.09824\n\n\n21.098 or 21%\n\n\nCode\nthird_and_six |&gt;\n  filter(play_type %in% rush_plays) |&gt;\n  filter(yards_to_goal &lt; 50) |&gt; \n  summarise(\n    plays = n(),\n    min = min(yards_gained),\n    max = max(yards_gained),\n    median = median(yards_gained),\n    yards_gainedAvg = mean(yards_gained)\n  )\n\n\n# A tibble: 1 × 5\n  plays   min   max median yards_gainedAvg\n  &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;           &lt;dbl&gt;\n1  1401   -16    42      4            5.30\n\n\nIn the first go-around of the code, it just gave me an average of 6 which to me didn’t seem entirely right. Added in min and max and saw that the max was 79 yards which means there are some outlier plays. Added in a Median which gave a more accurate gain of yards.\nFrom there, I added in a filter of less than 50 yards. This gave me an average of 5 yards but still the same median. However, the max is 42. Which I think is more reasonable.\nI then added in plays count and it said there are 1,401 plays where third and six are less than 50 yards. I think this is a better model than just looking at just the average because now it shows that out of 11,655 plays only 1,401 are third and six plays.\n\n\nCode\nthird_and_six |&gt;\n  filter(play_type %in% rush_plays) |&gt;\n  filter(yards_to_goal &lt; 50) |&gt; \n  group_by(pos_team) |&gt;\n  summarise(\n    plays = n(),\n    min = min(yards_gained),\n    max = max(yards_gained),\n    median = median(yards_gained),\n    yards_gainedAvg = mean(yards_gained)\n  ) |&gt;\n  arrange(desc(plays))\n\n\n# A tibble: 239 × 6\n   pos_team         plays   min   max median yards_gainedAvg\n   &lt;chr&gt;            &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;           &lt;dbl&gt;\n 1 Air Force           21    -3    18    5              5.57\n 2 Army                20    -5    13    3.5            3.65\n 3 Kent State          20   -16    38    5              7.35\n 4 Navy                20    -6    15    3              3.8 \n 5 Ole Miss            17    -3    14    3              4.35\n 6 Florida State       16    -3    31    5              6.12\n 7 Georgia Southern    16    -5    19    2.5            3.38\n 8 Oklahoma State      16    -5    18    3              3.69\n 9 Kennesaw State      15    -2    16    3              4.8 \n10 Bowling Green       14   -10     9    2.5            1.79\n# ℹ 229 more rows\n\n\nI found that Air Force runs third and six plays that are less than 50 yards about 21 times which is the most out of all the teams.\n\n\nCode\nthird_and_six |&gt;\n  filter(play_type %in% rush_plays) |&gt;\n  filter(yards_to_goal &lt; 30) |&gt; \n  filter (pos_team == \"Maryland\") |&gt;\n  filter (period == 4) |&gt;\n  summarise(\n    plays = n(),\n    min = min(yards_gained),\n    max = max(yards_gained),\n    median = median(yards_gained),\n    yards_gainedAvg = mean(yards_gained)\n  )\n\n\n# A tibble: 1 × 5\n  plays   min   max median yards_gainedAvg\n  &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;           &lt;dbl&gt;\n1     2    -1    15      7               7\n\n\nLooking at the fact there are only 2 times that Maryland has been in a third and six situation where they were on the opponents territory, it basically looks like that Maryland doesn’t find themselves in these situations a lot. Which would make sense that what happened against Illinois…happened.\nGraphic\n\n\nCode\nplays_third_and_six &lt;- third_and_six |&gt;\n  group_by(pos_team) |&gt;\n  filter(play_type %in% rush_plays) |&gt;\n  filter(yards_to_goal &lt; 50) |&gt;\n  filter (period == 4) |&gt;\n  summarise(\n    plays = n(),\n    min = min(yards_gained),\n    max = max(yards_gained),\n    median = median(yards_gained),\n    yards_gainedAvg = mean(yards_gained)\n  ) |&gt; arrange (desc(plays))\n\n\nI’m trying to show the list with the teams with the most amount of plays.\n\n\nCode\nplays_third_and_six &lt;- third_and_six |&gt;\n  group_by(pos_team) |&gt;\n  filter(play_type %in% rush_plays) |&gt;\n  filter(yards_to_goal &lt; 50) |&gt;\n  filter (period == 4) |&gt;\n  summarise(\n    plays = n()\n  ) |&gt; arrange (desc(plays))\n\n\nI took out the yards gained and the averages because for some reason my list was organizing by yards gained instead of plays.\n\n\nCode\nplays_third_and_six |&gt;\n  arrange(desc(plays)) |&gt;\n  top_n(10)|&gt;\n  select (pos_team, plays)\n\n\nSelecting by plays\n\n\n# A tibble: 21 × 2\n   pos_team        plays\n   &lt;chr&gt;           &lt;int&gt;\n 1 Air Force          10\n 2 Oklahoma State      9\n 3 Troy                9\n 4 Ole Miss            7\n 5 San Diego State     7\n 6 UAB                 7\n 7 South Alabama       6\n 8 Arizona State       5\n 9 Arkansas            5\n10 Colorado            5\n# ℹ 11 more rows\n\n\n\n\nCode\ntop10 &lt;- plays_third_and_six |&gt;\n  arrange(desc(plays)) |&gt;\n  head(10) |&gt; \n  select(pos_team, plays)\n\n\nI don’t know if I’m right but I think R is seeing that some teams have the same amount of plays so it’s thinking that they are also in the top 10. But I’m not sure why it’s showing me more than ten teams.\n\n\nCode\nlibrary(ggplot2)\nlibrary(scales)\n\n\n\nAttaching package: 'scales'\n\n\nThe following object is masked from 'package:purrr':\n\n    discard\n\n\nThe following object is masked from 'package:readr':\n\n    col_factor\n\n\n\n\nCode\nggplot() + \n  geom_bar(\n    data=top10, \n    aes(x=pos_team, weight=plays)) + scale_y_continuous(labels=comma)\n\n\n\n\n\n\n\nCode\nggplot() + \n  geom_bar(\n    data=top10, \n    aes(\n      x=reorder(pos_team, plays), \n      weight=plays\n      )\n    )\n\n\n\n\n\n\n\nCode\nggplot() + \n  geom_bar(\n    data=top10, \n    aes(x=reorder(pos_team, plays),\n        weight=plays)) + \n  scale_y_continuous(labels=comma) + \n  labs(\n    title=\"Air Force Puts Themselves in Tight Situations Often\", \n    x=\"Team\", \n    y=\"Plays\") + \n  theme_minimal() + \n  coord_flip()\n\n\n\n\n\nSo, in conclusion, I found that Air Force ends up being the team that has run the most amount of third and six plays. Seemlingly, it means that Air Force also knows how to run the ball more and knows how to get themselves out of those situations. It’s interesting because ESPN just ran an article about how Air Force is the best school in Colorado.\nOddly enough, Prime Time and his team is also on this list. For them, I don’t think this is a good thing considering they have had many inconsistencies when it comes to running the ball. Look at the Stanford game when they went into double overtime and basically gave that game away last minute. Maybe Colorado would benefit in NOT finding themselves in these situations. Whereas, their state neighbor has actually benefit from those third and six plays."
  },
  {
    "objectID": "posts/Maryland Football YPP/index.html",
    "href": "posts/Maryland Football YPP/index.html",
    "title": "Alexa's Corner",
    "section": "",
    "text": "logs <- read_csv(\"https://thescoop.org/sports-data-files/footballlogs1123.csv\")\n\nRows: 19934 Columns: 55\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (8): HomeAway, Opponent, Result, TeamFull, TeamURL, Outcome, Team, Con...\ndbl  (46): Game, PassingCmp, PassingAtt, PassingPct, PassingYds, PassingTD, ...\ndate  (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nhead(logs)\n\n# A tibble: 6 × 55\n   Game Date       HomeAway Opponent  Result    PassingCmp PassingAtt PassingPct\n  <dbl> <date>     <chr>    <chr>     <chr>          <dbl>      <dbl>      <dbl>\n1     1 2011-09-03 <NA>     Louisiana W (61-34)         28         43       65.1\n2     2 2011-09-08 <NA>     Arizona   W (37-14)         42         53       79.2\n3     3 2011-09-17 @        Tulsa     W (59-33)         29         40       72.5\n4     4 2011-09-24 @        Texas A&M W (30-29)         47         60       78.3\n5     5 2011-10-08 <NA>     Kansas    W (70-28)         38         49       77.6\n6     6 2011-10-15 @        Texas     W (38-26)         23         41       56.1\n# ℹ 47 more variables: PassingYds <dbl>, PassingTD <dbl>, RushingAtt <dbl>,\n#   RushingYds <dbl>, RushingAvg <dbl>, RushingTD <dbl>, OffensivePlays <dbl>,\n#   OffensiveYards <dbl>, OffenseAvg <dbl>, FirstDownPass <dbl>,\n#   FirstDownRush <dbl>, FirstDownPen <dbl>, FirstDownTotal <dbl>,\n#   Penalties <dbl>, PenaltyYds <dbl>, Fumbles <dbl>, Interceptions <dbl>,\n#   TotalTurnovers <dbl>, TeamFull <chr>, TeamURL <chr>, Outcome <chr>,\n#   TeamScore <dbl>, OpponentScore <dbl>, DefPassingCmp <dbl>, …\n\n\n\nwinloss <- logs |> \n  mutate(\n    wins = case_when(\n      grepl(\"W\", Outcome) ~ 1, \n      grepl(\"L\", Outcome) ~ 0)\n)\n\n\nwinloss |>\n  filter(Team == \"Maryland\") |>\n  group_by(Season) |>\n  summarise(\n    TotalPlays = sum(OffensivePlays),\n    TotalYards = sum(OffensiveYards), \n    DefensivePlays = sum(DefPlays), \n    DefensiveYards = sum(DefYards),\n    TotalWins = sum(wins)) |>\n  mutate(\n    OffensiveYPP = TotalYards/TotalPlays, \n    DefensiveYPP = DefensiveYards/DefensivePlays) -> ypp\n\n\nggplot() + \n  geom_point(\n    data=ypp, aes(x=OffensiveYPP, y=DefensiveYPP)\n    )\n\n\n\n\n\nggplot() + \n  geom_point(\n    data=ypp, \n    aes(x=OffensiveYPP, y=DefensiveYPP, size=TotalWins)\n    )\n\n\n\n\n\nggplot() + \n  geom_point(\n    data=ypp, \n    aes(x=OffensiveYPP, y=DefensiveYPP, size=TotalWins),\n    alpha = .3) + \n  scale_size(range = c(3, 8), name=\"Wins\")\n\n\n\n\n\nlibrary(ggrepel)\n\n\nggplot() + \n  geom_point(\n    data=ypp, \n    aes(x=OffensiveYPP, y=DefensiveYPP, size=TotalWins), \n    color=\"red\", \n    alpha=.5) + \n  geom_text_repel(\n    data=ypp,\n    aes(x=OffensiveYPP, y=DefensiveYPP, label=Season)) +\n  labs(title=\" Maryland's Offense Lacks where Their Defense Picks Up\", subtitle=\"The Terps have seen more wins when their defense and offense worked together.\", caption=\"Source: NCAA | By Alexa Henry\")  + theme_minimal() + \n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank()\n    )\n\n\n\n\nMaryland totaled two wins during the COVID year when teams didn’t really know what was going on in the College Football conferences. This was when the defense gave up less yards and their offense ran for more yards. However, looking into this season, 2023 so far it shows that they are totaling more wins when the offense is running, you know, doing their job, and the defense is is giving up less yards. Although, 2023 season isn’t over, it would be interesting to see where the bubble lands after the season concludes. Maybe to show this, we can filter by dates but that would cut off the full season for the other seasons.\nThis idea conflicts with years like 2014 when the offense wasn’t running as much and the defense was giving up more yards compared to other years. It also shows the progression of their offense since the Coach Lock era. Minus 2020, 2020 was a fluke for everyone."
  },
  {
    "objectID": "posts/volleball aces/index.html",
    "href": "posts/volleball aces/index.html",
    "title": "Volleyball Aces",
    "section": "",
    "text": "Code\nset.seed(1234)\n\n\n\n\nCode\nplayers <- read_csv(\"https://raw.githubusercontent.com/dwillis/NCAAWomensVolleyballData/main/data/ncaa_womens_volleyball_playerstats_2023.csv\")\n\n\nRows: 5133 Columns: 33\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (7): team, full_name, roster_name, last_name, first_name, yr, pos\ndbl (24): season, jersey, feet, inches, gp, gs, mp, s, kills, errors, total_...\nlgl  (2): ms, total_blocks\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nCode\nvb20 <- players |> filter(mp>20, !is.na(aces), !is.na(pos))\nvb20 <- vb20 |> mutate(acespermatch = aces/mp)\n\n\n\n\nCode\nsummary(vb20$acespermatch)\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.0000  0.1905  0.6250  0.6222  0.9545  2.2083 \n\n\n\n\nCode\nvb20 <- vb20 |> filter(acespermatch > 0.95)\n\n\n\n\nCode\nggplot() + geom_beeswarm(data=vb20, aes(x=pos, y=aces), color=\"grey\")\n\n\n\n\n\n\n\nCode\numd <- vb20 |> \n  filter(team == \"Maryland Terrapins, Terps\") |> \n  filter(acespermatch>0.95) |> \n  arrange(desc(acespermatch))\n\n\n\n\nCode\nggplot() + \n  geom_beeswarm(\n    data=vb20, \n    groupOnX=TRUE, \n    aes(x=pos, y=aces), color=\"grey\") + \n  geom_beeswarm(\n    data=umd, \n    groupOnX=TRUE, \n    aes(x=pos, y=aces), color=\"red\") +\n   geom_text_repel(\n    data=umd, \n    aes(x=pos, y=aces, label=full_name)) +\n      labs(title=\"Maryand Players Land Middle of the Road in Aces Per Match\", subtitle=\"Gunter and Csire lead the way in aces per match with Engel right behind them.\", caption=\"Source: NCAA | By Alexa Henry\")  + theme_minimal() + \n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank()\n    )\n\n\nWarning: The `groupOnX` argument of `geom_beeswarm()` is deprecated as of ggbeeswarm\n0.7.1.\nℹ ggplot2 now handles this case automatically.\n\n\n\n\n\nGunter and Csire are close to each other when it comes to aces per match with Engel just under them by a hair. However, they land in the middle of the road among other players like them. By position, Gunter lands among the few that are able to rack up aces per match which speaks to how valuable the transfer has been since coming from Mississippi State. Csire lands among the average side of the pack when it comes to aces per match. Again, it still speaks to how valuable she is but it does show that her numbers are common among peers like her. Engel, who is transitioning into more of a DS role on the team, lands more towards the bottom among setters. Her numbers can be better but she only comes into serve for the team because she is so affective behind the service line."
  },
  {
    "objectID": "posts/NFL-RedZone/index.html",
    "href": "posts/NFL-RedZone/index.html",
    "title": "NFL Redzone EPA",
    "section": "",
    "text": "Code\nplays <- load_pbp(2022)\n\n\n\n\nCode\nhead(plays)\n\n\n── nflverse play by play data ──────────────────────────────────────────────────\n\n\nℹ Data updated: 2023-02-28 04:24:38 EST\n\n\n# A tibble: 6 × 372\n  play_id game_id      old_game_id home_team away_team season_type  week posteam\n    <dbl> <chr>        <chr>       <chr>     <chr>     <chr>       <int> <chr>  \n1       1 2022_01_BAL… 2022091107  NYJ       BAL       REG             1 <NA>   \n2      43 2022_01_BAL… 2022091107  NYJ       BAL       REG             1 NYJ    \n3      68 2022_01_BAL… 2022091107  NYJ       BAL       REG             1 NYJ    \n4      89 2022_01_BAL… 2022091107  NYJ       BAL       REG             1 NYJ    \n5     115 2022_01_BAL… 2022091107  NYJ       BAL       REG             1 NYJ    \n6     136 2022_01_BAL… 2022091107  NYJ       BAL       REG             1 NYJ    \n# ℹ 364 more variables: posteam_type <chr>, defteam <chr>, side_of_field <chr>,\n#   yardline_100 <dbl>, game_date <chr>, quarter_seconds_remaining <dbl>,\n#   half_seconds_remaining <dbl>, game_seconds_remaining <dbl>,\n#   game_half <chr>, quarter_end <dbl>, drive <dbl>, sp <dbl>, qtr <dbl>,\n#   down <dbl>, goal_to_go <dbl>, time <chr>, yrdln <chr>, ydstogo <dbl>,\n#   ydsnet <dbl>, desc <chr>, play_type <chr>, yards_gained <dbl>,\n#   shotgun <dbl>, no_huddle <dbl>, qb_dropback <dbl>, qb_kneel <dbl>, …\n\n\n\n\nCode\ntype_plays <- c(\"pass\", \"run\")\n\nplays |>\n  filter(play_type %in% type_plays) |>\n  filter(posteam == \"MIA\") |>\n  filter(week < 4) |>\n  filter (yardline_100 < 20) |>\n  summarise(\n    Totalplays = n()\n  )\n\n\n# A tibble: 1 × 1\n  Totalplays\n       <int>\n1         20\n\n\n\n\nCode\nplays |>\n  filter(play_type %in% type_plays) |>\n  filter(posteam == \"MIA\") |>\n  filter(week < 4) |>\n  filter (yardline_100 < 20) |>\n  summarise(\n    TotalEPA = sum(epa)\n  )\n\n\n# A tibble: 1 × 1\n  TotalEPA\n     <dbl>\n1     9.00\n\n\n\n\nCode\nplays |>\n  filter(play_type %in% type_plays) |>\n  filter(posteam == \"MIA\") |>\n  filter (yardline_100 < 20) |>\n  summarise(\n    TotalEPA = sum(epa)\n  )\n\n\n# A tibble: 1 × 1\n  TotalEPA\n     <dbl>\n1     6.10\n\n\nIn the first three weeks of the 2022 season, Miami had 9 EPA but dropped down by almost 3 points by the end of the season.\n\n\nCode\n9.000518    - 6.102557  \n\n\n[1] 2.897961\n\n\n\n\nCode\nnfl_plays_week3 <- plays |>\n  group_by(posteam) |>\n  filter(play_type %in% type_plays) |>\n  filter(week < 4) |>\n  filter (yardline_100 < 20)\n\n\n\n\nCode\nnfl_plays_week3 <- nfl_plays_week3|>\n  group_by(posteam) |>\n  filter(play_type %in% type_plays) |>\n  filter(week < 4) |>\n  filter (yardline_100 < 20) |>\n  summarise(\n    TotalEPA_3 = sum(epa),\n    Totalplays_3 = n())\n\n\n\n\nCode\nnfl_plays_week8 <- plays |>\n  group_by(posteam) |>\n  filter(play_type %in% type_plays) |>\n  filter(week < 9) |>\n  filter (yardline_100 < 20)\n\n\n\n\nCode\nnfl_plays_week8 <- nfl_plays_week8 |>\n  group_by(posteam) |>\n  filter(play_type %in% type_plays) |>\n  filter(week < 9) |>\n  filter (yardline_100 < 20) |>\n  summarise(\n    Totalplays_8 = n(),\n    TotalEPA_8 = sum(epa))\n\n\n\n\nCode\ntotal_nfl <- nfl_plays_week3 |> left_join(nfl_plays_week8, join_by(posteam)) \n\n\n\n\nCode\nggplot() + \n  geom_dumbbell(\n    data=total_nfl, \n    aes(y=posteam, x=TotalEPA_3, xend=TotalEPA_8)\n  )\n\n\nWarning: Using the `size` aesthetic with geom_segment was deprecated in ggplot2 3.4.0.\nℹ Please use the `linewidth` aesthetic instead.\n\n\n\n\n\n\n\nCode\nggplot() + \n  geom_dumbbell(\n    data=total_nfl, \n    aes(y=reorder(posteam,TotalEPA_3), x=TotalEPA_3, xend=TotalEPA_8),\n    size = 1,\n    colour = \"grey\",\n    colour_x = \"green\",\n    colour_xend = \"blue\") +\n  theme_minimal() +\n  labs(title = \"Most NFL teams experienced higher EPA's through week 8 in 2022\", y=\"team\")\n\n\n\n\n\nIt appears some teams actually experienced a higher EPA as they continued through the 2022 season. However the outlier in this is Jacksonville. Jacksonville experienced a drop in their EPA as they went through the season. They did barely make the playoffs that year and I believe lost so this can be a reflection of their regression in the season. One team that started with a high EPA and ended with a high EPA was Kansas City and they obviously went on to win the superbowl because the Eagles defense didn’t show up in the second half of the game. Regardless, besides certain teams, it does seem to be that if you start with an average EPA, teams typically finish high."
  }
]